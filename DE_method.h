// DE_method.h: interface for the CDE_method class.
//
//////////////////////////////////////////////////////////////////////

#if !defined(AFX_DE_METHOD_H__73F77270_D274_41FF_A168_CB5D10CFE4E0__INCLUDED_)
#define AFX_DE_METHOD_H__73F77270_D274_41FF_A168_CB5D10CFE4E0__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#include ".\EACommonClass\Individual.h"
#include ".\EACommonClass\Rand.h"
#include ".\EACommonClass\ProblemDef.h"
#include <fstream>
using namespace std;
class CDE_method  
{
public:
	CDE_method();
	virtual ~CDE_method();

	/* ------------------------class methods------------------------ */
public:
	// public methods
	/* initialize the decision variables of different test problems */
	void init_variables();							// initialize the decision variables
	void init_normal_variables();					// initialize the normal functions' variables

	/* initialize the population */
	void init_pop();								// initialize the population
	void init_pop_random();							// initialize the population randomly

	/* evaluate the individual and population */
	void evaluate_ind(CIndividual &);				// evaluate the individual
	void evaluate_normal_ind(CIndividual &);		// evaluate the individual of normal functions

	void evaluate_pop(CIndividual *, int);			// evaluate the population

	/* execute the algorithms */
	void Run_Optimizer(int, double, int, int);		// execute the optimizer

	/* compare the two individuals */
	int  compare_ind(CIndividual *, CIndividual *);	// compare the two individuals
	void find_best_index(CIndividual *, int);		// find the index of the best individual in the population

	void restart_pop(CIndividual *, int);			// restart the population
	void sort_pop(CIndividual *, int);				// sort the population w.r.t fitness with ascend order

	/* some complementary methods */
	void random_index(int *array_index, int all_size, int size);

	void shell_sort_pop(CIndividual* ,int *, int);		// shell sort routine in ascending order
	void shell_sort_array(double *, int *, int);
	void shell_sort_array_t(tFitness *, int *, int);

	double median(double *array, int size);			// get the median value of the specific array
	double mean_std(double *array, int size, double &stdv);	// get the mean and standard values of the specific array
	tFitness mean_std_t(tFitness *array, int size, tFitness &stdv);
	void display_result(long int);						// display the results in the screen
	void report_result(long int, ofstream &);			// report the results in the files
	void report_diversity(long int, ofstream &);			// report the diversity in the files
	void report_parameter(long int gen, ofstream &file);

	/* ------------------------class members------------------------ */	
public:
	// public attributes
	CIndividual *parent_pop;				// the main population
	CIndividual *child_pop;					// the child population
	CIndividual *child_pop1;				// the child population used in BBO_DE
	CIndividual best_individual;			// the current best individual

	CIndividual	mutant_vector;				// save the mutant vector
	CIndividual new_child;					// the new child generated by the genetic operator
	
	int pop_size;							// size of the main population
	int best_index;							// index of the current best individual
	int worst_index;

	int flag_precision;						// stop criterion

	long int max_NFFEs;						// maximal number of fitness function evaluations
	long int max_iterations;				// maximal number of iterations
	long int evaluations;					// current number of fitness function evaluations
	long int gen;							// current generation counter
	int MINIMIZE;

	double *upper_bounds;					// upper bounds of the decision variables
	double *lower_bounds;					// lower bounds of the decision variables
	double known_optimal;					// known optima of the problems

	double pop_diversity;
	double max_interval;

	/* some other class objectives */
	double rnd_seed;
	CRand  m_rnd;

	int func_flag;								// flag of the function optimized
	CProblemDef				m_func;				// normal test functions

	int method_flag;

	int	*sort_index;							// only for sorting the population

	/************************************************************************/
	/* Methods and attributes for DE algorithm                              */
	/************************************************************************/
public:
	void	run_DE_method();						// the original DE algorithm

	double	m_F;									// scale factor
	double	m_CR;									// probability of DE crossover
	int		m_strategy;								// mutation strategy
	int		param_adaptation;						// for parameter adaptation used in jDE

	/************************************************************************/
	/* DE with probability-based mutation operators                         */
	/************************************************************************/
public:
	/* calculate the probabilities of each individual based on its fitness */
	int		weights_flag;
	void	normalize_reward(tFitness * S_reward, int S_size);
	void	calculate_weights(tFitness *S_reward, int S_size, double *weights, int flag);

	void	rank_vector_selection(int base_index, int *index, int size, const double *probability);

	void	run_rank_DE_method();

};

#endif // !defined(AFX_DE_METHOD_H__73F77270_D274_41FF_A168_CB5D10CFE4E0__INCLUDED_)
